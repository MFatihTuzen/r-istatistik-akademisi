---
title: "Temel Söz Dizimi ve Yardım Sistemi"
author: "Dr. M. Fatih Tüzen"
format:
  revealjs:
    theme: white
    slide-number: true
    self-contained: true
    footer: 📺 R Programlama ve İstatistik Akademisi
    scrollable: true
execute:
  echo: true
  eval: true
  warning: false
  message: false
---

## 🎯 Giriş – Neden Önemli?

-   Temel söz dizimi, R dilini öğrenmenin yapı taşıdır.
-   Yardım sistemi, kendi kendine öğrenmenin en etkili yoludur.
-   Bu konu, sonraki tüm derslerin altyapısını oluşturur.

💡 **Unutma:** Temeli sağlam atarsan, ileri konularda zorlanmazsın.

------------------------------------------------------------------------

## 🔄 Atama Operatörleri (`<-`)

-   Değişkenlere değer atamak için kullanılır
-   Okuma kolaylığı sağlar (sola ok yönü)
-   S dili geleneğinden miras: 1976’da Bell Labs’te geliştirilen S dilinden R’ye aktarılan standart
-   `<-` : Tavsiye edilen standart atama operatörü. Sol tarafa **isim** (nesne adı), sağ tarafa **değer** yazılır.
-   `=` de çalışır ama fonksiyon argümanları ile karışabilir
-   `->` : Daha az kullanılan sağa atama

```{r}
x <- 5 # x değişkenine 5 değerini ata
y = x+ 3  # y değişkeni, x + 3
15 -> z  # z değişkenine 15 değerini ata
```

💡 **İpucu:** Kod okuma kolaylığı için `<-` tercih et.\
⌨️ **Kısayol:**

-    **Windows / Linux:** `Alt + -`

-   **Mac:** `Option + -`

⚠️ **İpucu:** Nesne adları boşluk, özel karakter içeremez; `snake_case` veya `camelCase` tercih et.

### 🐍 **snake_case**

-    Kelimeler **küçük harf** ile yazılır. Kelimeler arasına **alt çizgi (`_`)** konur.

```{r}
#| eval: false
toplam_satis <- 120
ortalama_maas <- mean(maas)
```

-   Avantajı: Okuması kolaydır, özellikle uzun isimlerde.

### 🐫 **camelCase**

-    İlk kelime **küçük harf** ile başlar, sonrakilerin **ilk harfi büyük** olur.

```{r}
#| eval: false
toplamSatis <- 120
ortalamaMaas <- mean(maas)
```

-   Avantajı: Daha kısa görünebilir, bazı dillerde standarttır (JavaScript, Java gibi).

💡 **İpucu:**

-   R topluluğunda genellikle **snake_case** tercih edilir.

-   Hangisini seçersen seç, **tutarlı ol**. Projenin her yerinde aynı stili kullan.

## 📊 **R’da Temel Aritmetik İşlemler**

R doğrudan aritmetik hesaplar için kullanabilmektedir. Tüm işlemler **konsolda** veya **script dosyasında** yapılabilir.

#### 🔢 Temel Operatörler

| İşlem       | Operatör      | Örnek (`R` kodu) |
|-------------|---------------|------------------|
| Toplama     | `+`           | `5 + 3` → `8`    |
| Çıkarma     | `-`           | `10 - 4` → `6`   |
| Çarpma      | `*`           | `6 * 7` → `42`   |
| Bölme       | `/`           | `20 / 4` → `5`   |
| Üs Alma     | `^` veya `**` | `2 ^ 3` → `8`    |
| Mod (kalan) | `%%`          | `10 %% 3` → `1`  |
| Tam Bölme   | `%/%`         | `10 %/% 3` → `3` |

#### 💡 **İpucu**

-    R **öncelik kurallarını** (parantez, çarpma/bölme, toplama/çıkarma) matematikteki gibi uygular.

```{r}
#| eval: false
2 + 3 * 4     # Önce 3 * 4, sonra + 2 → 14
(2 + 3) * 4   # Önce 2 + 3, sonra * 4 → 20
```

-   Büyük hesaplamalarda okunabilirliği artırmak için **boşluk bırakın**:\

    `a + b` daha okunaklıdır, `a+b` yerine.

## 📝 Yorum Satırları: Neden / Ne Zaman?

-    `#` ile başlayan satırlar çalıştırılmaz

-   Kodun ne yaptığını açıklamak için kullanılır

-   **Neden?** Kodu okuyan kişiye (ve kendine) **bağlam** verir; “ne yaptım?”dan çok **“neden yaptım?”** sorusunu yanıtlar.

-   **Ne zaman?** Veri okuma–temizleme–hesaplama gibi adımların **amacını** belirtirken; karar noktalarında (eşik, yöntem seçimi) kısa not düşerken.

-   **Kısa kural:** Bariz olanı yazma (“# 2 ile topluyor”); **niyeti** yaz.

```{r}
#| eval: false
# Veri dosyasını içe aktar (örnek veri)
df <- read.csv("data/örnek.csv")

# Eksik değerleri çıkarıyoruz; giriş seviyesi için basit yaklaşım
df <- na.omit(df)

# Ortalama hesapla: raporda tek bir sayıya ihtiyaç var
x_mean <- mean(df$x)
```

### 📌 Başlık Gibi Kullanma

-   Uzun scriptlerde bölümleri ayırmak için başlık formatında yorum satırları ekleyebilirsin.
-   Bu, özellikle fonksiyon veya veri işleme adımlarında gezinmeyi kolaylaştırır.

```{r}
#| eval: false
# ==== VERİYİ OKU ====
df <- read.csv("data/örnek.csv")

# ==== EKSİK DEĞER İŞLEME ====
df <- na.omit(df)

# ==== TEMEL ÖZET İSTATİSTİKLER ====
x_mean <- mean(df$x)
```

### ⏸ Geçici Kod Kapama

-    Bir satırı çalıştırmamak için başına `#` ekle.

-   Tüm satırları geçici olarak kapatmak için toplu yorum kısayolunu kullan.

```{r}
# plot(df$x, main = "Hızlı Kontrol Grafiği")  # ← Şimdilik kapalı
```

💡 **Kısayol (çoklu yorum aç/kapat):**

-   **Windows/Linux:** `Ctrl + Shift + C`

-   **Mac:** `Cmd + Shift + C`

💡 **İpucu:** Yorum eklemek, gelecekte kendine teşekkür etmenin bir yoludur.

## 🧠 Mantıksal Operatörler

| Operatör | Anlamı          | Örnek (`TRUE`/`FALSE` döner) |
|----------|-----------------|------------------------------|
| `<`      | Küçüktür        | `3 < 5` → `TRUE`             |
| `>`      | Büyüktür        | `5 > 10` → `FALSE`           |
| `<=`     | Küçük veya eşit | `3 <= 3` → `TRUE`            |
| `>=`     | Büyük veya eşit | `4 >= 6` → `FALSE`           |
| `==`     | Eşittir         | `2 == 2` → `TRUE`            |
| `!=`     | Eşit değil      | `2 != 3` → `TRUE`            |
| `&`      | VE              | `TRUE & TRUE`→ `TRUE`        |
| `|`      | VEYA            | `TRUE | FALSE`→ `TRUE`       |

💡 **Nerede Kullanılır?**

-   Koşullarda birden fazla şartı kontrol etmek için:

```{r}
x <- 5
x > 3 & x < 10   # TRUE
x == 2 | x == 5  # TRUE
```

## 📚 R Yardım Sistemi

💡 R, fonksiyonlar ve paketler hakkında kapsamlı bir yerleşik yardım sistemine sahiptir.

### 🔹 Temel Kullanım

| Komut             | Açıklama                           |
|-------------------|------------------------------------|
| `?fonksiyon`      | Fonksiyonun yardım sayfasını açar. |
| `help(fonksiyon)` | `?` ile aynı işlev.                |
| `??anahtar`       | Anahtar kelime ile yardım arar.    |

```{r}
#| eval: false
?mean      # mean() fonksiyonunun yardım sayfası
??"linear model"
```

### 🔹 Ek İpuçları

-    📖 **Örnekler:** Yardım sayfasının sonunda bulunur.

```{r}
#| eval: false
example(mean)
```

-   📦 **Paket Yardımı:**

```{r}
#| eval: false
help(package = "ggplot2")
```

-   🔍 **Arama Fonksiyonu:**

```{r}
#| eval: false
help.search("anova")
```

💬 **Not:** Yardım sayfaları R’nin resmi belgelerinden geldiği için oldukça teknik olabilir.\
Yeni başlayanlar için kısa örnekler ve topluluk kaynakları (R-bloggers, Stack Overflow) da faydalıdır.

## 📝 Özet

📌 **Bu bölümde neler öğrendik?**

-    R’nin temel **söz dizimi** kuralları

-    `<-` ile **atama işlemleri** ve kısayolu

-   **Yorum satırları** (`#`) ile kodu açıklama

-   Temel **aritmetik operatörler** (+, -, \*, /, \^, %%)

-   **Mantıksal operatörler** (\>, \<, \>=, \<=, ==, !=, & , \|)

-   R’nin **yardım sistemi** (`?`, `??`, `help()`)

💡 **Ana fikir:**\
Kod okunabilirliği ve düzenli çalışma alışkanlıkları, R öğrenme sürecinin en başında kazanılmalıdır.

## 📢 Takip Etmeyi Unutma!

📺 YouTube Kanalı: [**R Programlama ve İstatistik Akademisi**](https://www.youtube.com/@RistatistikAkademi)\
📘 Kitap: [R Programlama](https://rprogramlama.netlify.app/)\
📝 Blog: [A Statistician’s R Notebook](https://mfatihtuzen.netlify.app/)\
🐙 [GitHub Reposu](https://github.com/MFatihTuzen/r-istatistik-akademisi)
